// win32 Visual C 컴파일시 추가
// 프로그램 가장 첫 줄에 추가할 것
#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>
#include "execute_query.h"

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>


void DB_connect();
struct MembersDto select_MemberId(char id[]);
void sql_error(char *msg) ;

EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[80];
	VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

// win32 Visual C 컴파일시 추가
#define getch() _getch()

int Error_flag = 0;

void DB_connect()
{
   EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[80];
	VARCHAR pwd[20];
    EXEC SQL END DECLARE SECTION;

    strcpy(uid.arr,"b20203110@//sedb2.deu.ac.kr:1521/orcl");
    uid.len =  strlen(uid.arr);
    strcpy(pwd.arr,"20203110");
    pwd.len = strlen(pwd.arr);

    Error_flag = 0 ;  

   // 아래 문장 수행 중에 에러가 발생하면 error 처리 루틴으로 감. Error_flag=1로 바뀜 
    EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

    // connection이 실패했을경우의 처리부분
    if ( Error_flag ==1 ){
        //printf("Connect error: %s", sqlca.sqlerrm.sqlerrmc);
        exit(-1);
    }

}

void execute_update(char query[]){ //insert, delete, update
    DB_connect();
    EXEC SQL BEGIN DECLARE SECTION;
        char dynstmt[1000];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
	
    sprintf(dynstmt, query);

    EXEC SQL EXECUTE IMMEDIATE :dynstmt ;
    
	EXEC SQL COMMIT WORK RELEASE ;
	
}

struct MembersDto select_MemberId(char id[]){ //select
    DB_connect();
    EXEC SQL BEGIN DECLARE SECTION;
    varchar v_member_id[100];
    varchar v_pw[100];
    varchar v_name[100];
	varchar v_role[100];

    char dynstmt[1000];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

    sprintf(dynstmt, "SELECT id, password, name, role FROM user_accounts where id = '%s'", id);

    EXEC SQL PREPARE S FROM :dynstmt ;
    EXEC SQL DECLARE c_cursor CURSOR FOR S ; 
    EXEC SQL OPEN c_cursor ;  
    //EXEC SQL WHENEVER NOT FOUND DO found();

    EXEC SQL FETCH c_cursor INTO :v_member_id, :v_pw, :v_name, :v_role;

    if(sqlca.sqlcode != 0){
        struct MembersDto result = {NULL, NULL, NULL, NULL};
        return result;
    }

    v_member_id.arr[v_member_id.len] = '\0';
    v_pw.arr[v_pw.len] = '\0';
    v_name.arr[v_name.len] = '\0';
	v_role.arr[v_role.len] = '\0';

    struct MembersDto result;
    strcpy(result.member_id, v_member_id.arr);
    strcpy(result.pw, v_pw.arr);
    strcpy(result.name, v_name.arr);
	strcpy(result.role, v_role.arr);

    return result;
}

/* --------------------------------------------------------------------------
void sql_error(msg)

   errrpt prints the ORACLE error msg and number.
-------------------------------------------------------------------------- */
void sql_error(char *msg)

{
    char err_msg[128];
    size_t buf_len, msg_len;

    EXEC SQL WHENEVER SQLERROR CONTINUE;

    printf("\n%s\n", msg);
    buf_len = sizeof (err_msg);
    sqlglm(err_msg, &buf_len, &msg_len);
    printf("%.*s\n", msg_len, err_msg);
    getch();
    
    EXEC SQL ROLLBACK WORK;

}

void execute_insert(char query[]){   //insert
    DB_connect();
    EXEC SQL BEGIN DECLARE SECTION;
        char dynstmt[1000];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
	
    sprintf(dynstmt, query);

    /* insert 문 실행 */
    Error_flag = 0 ;

    EXEC SQL EXECUTE IMMEDIATE :dynstmt ;

    if (Error_flag == 0) {  // Successful execution
    printf("\n");
    printf("Successfully added. Press any key to continue.\n");
    EXEC SQL COMMIT WORK;
    getch();
	}
	else {
    printf("\n");
    printf("The tuple was not added. Press any key to continue.\n");
    EXEC SQL ROLLBACK WORK;
    getch();
	}
	
}

struct BooksDto* selectBooks_C(const char* isbn, const char* title, const char* author, const char* genre, int* rowCount) {
    DB_connect();
    EXEC SQL BEGIN DECLARE SECTION;
    varchar v_isbn[100];
    varchar v_title[100];
    varchar v_author[100];
    varchar v_genre[100];
    varchar v_book_price[100];
    int v_quantity;
    char dynstmt[2000];
    int count = 0;
    EXEC SQL END DECLARE SECTION;

    // SQL 쿼리 생성
    sprintf(dynstmt, "SELECT isbn, title, author, genre, book_price, quantity FROM books WHERE isbn LIKE '%%%s%%' AND title LIKE '%%%s%%' AND author LIKE '%%%s%%' AND genre LIKE '%%%s%%'", isbn, title, author, genre);

    // SQL 준비 및 커서 실행
    EXEC SQL PREPARE book_query FROM :dynstmt;
    EXEC SQL DECLARE book_cursor CURSOR FOR book_query;
    EXEC SQL OPEN book_cursor;

    struct BooksDto* result = (struct BooksDto*) malloc(sizeof(struct BooksDto) * 100);
    if (!result) {
        printf("Memory allocation failed\n");
        return NULL;
    }

    // 결과 처리
    while (1) {
        EXEC SQL FETCH book_cursor INTO :v_isbn, :v_title, :v_author, :v_genre, :v_book_price, :v_quantity;

        if (sqlca.sqlcode == 1403) break;  // NO DATA FOUND
        else if (sqlca.sqlcode != 0) {
            printf("Fetch error: %s\n", sqlca.sqlerrm.sqlerrmc);
            break;
        }

        // 널 처리
        v_isbn.arr[v_isbn.len] = '\0';
        v_title.arr[v_title.len] = '\0';
        v_author.arr[v_author.len] = '\0';
        v_genre.arr[v_genre.len] = '\0';
        v_book_price.arr[v_book_price.len] = '\0';

        // 결과 저장
        strcpy(result[count].isbn, v_isbn.arr);
        strcpy(result[count].title, v_title.arr);
        strcpy(result[count].author, v_author.arr);
        strcpy(result[count].genre, v_genre.arr);
        result[count].book_price = atoi(v_book_price.arr);
        result[count].quantity = v_quantity; // 수량 저장

        count++;
    }

    *rowCount = count;

    // 커서 닫기
    EXEC SQL CLOSE book_cursor;

    return result;
}

void updateBookQuantity(const char* isbn, int newQuantity) {
    DB_connect();
    EXEC SQL BEGIN DECLARE SECTION;
    varchar v_isbn[100];
    int v_newQuantity;
    EXEC SQL END DECLARE SECTION;

    strcpy(v_isbn.arr, isbn);
    v_isbn.len = strlen(isbn);
    v_newQuantity = newQuantity;

    EXEC SQL UPDATE books
        SET quantity = :v_newQuantity
        WHERE isbn = :v_isbn;

    EXEC SQL COMMIT WORK;
}

void savePurchaseHistory(const char* userId, const char* isbn, int quantity, int totalAmount) {
    DB_connect();
    EXEC SQL BEGIN DECLARE SECTION;
    varchar v_user_id[20];
    varchar v_isbn[20];
    int v_quantity;
    int v_totalAmount;
    EXEC SQL END DECLARE SECTION;

    // 값 설정
    strcpy(v_user_id.arr, userId);
    v_user_id.len = strlen(userId);
    strcpy(v_isbn.arr, isbn);
    v_isbn.len = strlen(isbn);
    v_quantity = quantity;
    v_totalAmount = totalAmount;

    // 구매 내역 삽입
    EXEC SQL INSERT INTO purchase_history (user_id, isbn, purchase_date, quantity, total_amount)
             VALUES (:v_user_id, :v_isbn, SYSDATE, :v_quantity, :v_totalAmount);

    if (sqlca.sqlcode != 0) {
        EXEC SQL ROLLBACK WORK;
        return;
    }

    EXEC SQL COMMIT WORK;
}

struct OrdersDto* selectPurchaseHistory_C(const char* user_id, int* rowCount) {
    DB_connect();
    EXEC SQL BEGIN DECLARE SECTION;
    varchar v_order_id[20];
    varchar v_member_id[20]; // 회원 ID 추가
    varchar v_isbn[50];
    varchar v_title[100];
    varchar v_author[100];
    varchar v_genre[50];
    varchar v_purchase_date[20];
    int v_count;
    int v_pay_amount;
    char dynstmt[2000];
    int count = 0;
    EXEC SQL END DECLARE SECTION;

    // 조건에 따라 쿼리 작성
    if (user_id != NULL) {
        // 특정 사용자의 구매 내역을 조회
        sprintf(dynstmt,
                "SELECT p.PURCHASE_ID, p.USER_ID, p.ISBN, b.TITLE, b.AUTHOR, b.GENRE, TO_CHAR(p.PURCHASE_DATE, 'YYYY-MM-DD'), p.QUANTITY, p.TOTAL_AMOUNT "
                "FROM purchase_history p "
                "JOIN books b ON p.ISBN = b.ISBN "
                "WHERE p.USER_ID = '%s'", user_id);
    } else {
        // 모든 사용자의 구매 내역을 조회
        sprintf(dynstmt,
                "SELECT p.PURCHASE_ID, p.USER_ID, p.ISBN, b.TITLE, b.AUTHOR, b.GENRE, TO_CHAR(p.PURCHASE_DATE, 'YYYY-MM-DD'), p.QUANTITY, p.TOTAL_AMOUNT "
                "FROM purchase_history p "
                "JOIN books b ON p.ISBN = b.ISBN");
    }

    // SQL 준비 및 커서 실행
    EXEC SQL PREPARE purchase_query FROM :dynstmt;
    EXEC SQL DECLARE purchase_cursor CURSOR FOR purchase_query;
    EXEC SQL OPEN purchase_cursor;

    struct OrdersDto* result = (struct OrdersDto*) malloc(sizeof(struct OrdersDto) * 100);
    if (!result) {
        printf("Memory allocation failed\n");
        return NULL;
    }

    // 결과 처리
    while (1) {
        EXEC SQL FETCH purchase_cursor INTO :v_order_id, :v_member_id, :v_isbn, :v_title, :v_author, :v_genre, :v_purchase_date, :v_count, :v_pay_amount;

        if (sqlca.sqlcode == 1403) break;  // NO DATA FOUND
        else if (sqlca.sqlcode != 0) {
            printf("Fetch error: %s\n", sqlca.sqlerrm.sqlerrmc);
            break;
        }

        // 널 처리
        v_order_id.arr[v_order_id.len] = '\0';
        v_member_id.arr[v_member_id.len] = '\0';
        v_isbn.arr[v_isbn.len] = '\0';
        v_title.arr[v_title.len] = '\0';
        v_author.arr[v_author.len] = '\0';
        v_genre.arr[v_genre.len] = '\0';
        v_purchase_date.arr[v_purchase_date.len] = '\0';

        // 결과 저장
        result[count].order_id = atoi(v_order_id.arr);
        strcpy(result[count].member_id, v_member_id.arr); // 구매한 사람의 ID 저장
        strcpy(result[count].book_ISBN, v_isbn.arr);
        strcpy(result[count].title, v_title.arr);
        strcpy(result[count].author, v_author.arr);
        strcpy(result[count].genre, v_genre.arr);
        strcpy(result[count].date, v_purchase_date.arr);
        result[count].count = v_count;
        result[count].pay_amount = v_pay_amount;

        count++;
    }

    *rowCount = count;

    // 커서 닫기
    EXEC SQL CLOSE purchase_cursor;

    return result;
}

void execute_delete(char query[]){
     DB_connect();
    EXEC SQL BEGIN DECLARE SECTION;
        char dynstmt[1000];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
	
    sprintf(dynstmt, query);

    /* insert 문 실행 */
    Error_flag = 0 ;

    EXEC SQL EXECUTE IMMEDIATE :dynstmt ;

    if( Error_flag == 0 ) {  // 정상적으로 수행 되는 경우
        printf("\n");	
        printf("없는 도서 이거나 삭제되었습니다.  아무키나 치세요 \n" ) ;
        EXEC SQL COMMIT WORK ;
        getch();
    }
    else {
        printf("\n");	
        printf(" 튜플이 삭제되지 않았습니다. 아무키나 치세요 \n" ) ;
        EXEC SQL ROLLBACK WORK ;
        getch();
    }
}